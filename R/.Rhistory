install.packages("rmarkdown")
library(rmarkdown)
---
title: "BAD_Proj_Analytics"
author: "Marcin Kostrzewski"
date: "13/05/2019"
output: pdf_document
---
exit
quit
```{r setup, include=FALSE}
---
title: "BAD_Proj_Analytics"
author: "Marcin Kostrzewski"
date: "13/05/2019"
output: pdf_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
## R Markdown
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r cars}
summary(cars)
```
## Including Plots
You can also embed plots, for example:
```{r pressure, echo=FALSE}
plot(pressure)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
---
title: "BAD_Proj_Analytics"
author: "Marcin Kostrzewski"
date: "13/05/2019"
output: pdf_document
---
library(backports)
detach("package:backports", unload = TRUE)
library(backports)
detach("package:backports", unload = TRUE)
library(backports)
library(base64enc)
library(digest)
library(evaluate)
library(glue)
library(highr)
library(htmltools)
library(jsonlite)
library(knitr)
library(magrittr)
library(mime)
library(markdown)
library(Rcpp)
library(rmarkdown)
library(rprojroot)
library(stringi)
library(stringr)
library(tinytex)
library(xfun)
library(yaml)
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
library(boot, lib.loc = "C:/Program Files/R/R-3.6.0/library")
library(class, lib.loc = "C:/Program Files/R/R-3.6.0/library")
library(cluster, lib.loc = "C:/Program Files/R/R-3.6.0/library")
library(codetools, lib.loc = "C:/Program Files/R/R-3.6.0/library")
library(compiler, lib.loc = "C:/Program Files/R/R-3.6.0/library")
library(foreign, lib.loc = "C:/Program Files/R/R-3.6.0/library")
library(grid, lib.loc = "C:/Program Files/R/R-3.6.0/library")
library(KernSmooth, lib.loc = "C:/Program Files/R/R-3.6.0/library")
library(lattice, lib.loc = "C:/Program Files/R/R-3.6.0/library")
library(MASS, lib.loc = "C:/Program Files/R/R-3.6.0/library")
library(Matrix, lib.loc = "C:/Program Files/R/R-3.6.0/library")
library(mgcv, lib.loc = "C:/Program Files/R/R-3.6.0/library")
library(nnet, lib.loc = "C:/Program Files/R/R-3.6.0/library")
library(parallel, lib.loc = "C:/Program Files/R/R-3.6.0/library")
library(rpart, lib.loc = "C:/Program Files/R/R-3.6.0/library")
library(stats4, lib.loc = "C:/Program Files/R/R-3.6.0/library")
library(splines, lib.loc = "C:/Program Files/R/R-3.6.0/library")
library(spatial, lib.loc = "C:/Program Files/R/R-3.6.0/library")
library(survival, lib.loc = "C:/Program Files/R/R-3.6.0/library")
library(tcltk, lib.loc = "C:/Program Files/R/R-3.6.0/library")
library(translations, lib.loc = "C:/Program Files/R/R-3.6.0/library")
library(tools, lib.loc = "C:/Program Files/R/R-3.6.0/library")
knitr::opts_chunk$set(echo = TRUE)
```{r cars}
tinytex::install_tinytex()
install.packages("DBI")
install.packages("Rtools")
library(DBI)
install.packages("odbc")
odbc::odbcListDrivers()
odbc::odbcListDrivers()
con <- DBI::dbConnect(odbc::odbc(),
driver = "ODBC Driver 13 for SQL Server",
database = "dbad_flights",
UID    = rstudioapi::askForPassword("Database user"),
PWD    = rstudioapi::askForPassword("Database password"),
host = "mssql-2016.labs.wmi.amu.edu.pl",
port = 5432)
install.packages("rstudioapi")
con <- DBI::dbConnect(odbc::odbc(),
driver = "ODBC Driver 13 for SQL Server",
database = "dbad_flights",
UID    = rstudioapi::askForPassword("Database user"),
PWD    = rstudioapi::askForPassword("Database password"),
host = "mssql-2016.labs.wmi.amu.edu.pl",
port = 5432)
con <- DBI::dbConnect(odbc::odbc(),
driver = "SQL Server",
database = "dbad_flights",
UID    = rstudioapi::askForPassword("Database user"),
PWD    = rstudioapi::askForPassword("Database password"),
host = "mssql-2016.labs.wmi.amu.edu.pl",
port = 5432)
con <- DBI::dbConnect(odbc::odbc(),
driver = "SQL Server",
database = "dbad_flights",
UID    = rstudioapi::askForPassword("Database user"),
PWD    = rstudioapi::askForPassword("Database password"),
server = "mssql-2016.labs.wmi.amu.edu.pl",
port = 5432)
processed_data <- DBI::dbGetQuery(con, "SELECT carrier,
origin_city_name,
dest_city_name,
fl_date,
arr_delay
FROM   Flight_delays
WHERE  arr_delay = (SELECT MAX(arr_delay)
FROM   Flight_delays
WHERE  arr_delay IS NOT NULL);")
knitr::opts_chunk$set(echo = TRUE)
plot(processed_data)
table(processed_data)
```{r processed_data, echo=FALSE}
library(odbc)
con <- DBI::dbConnect(odbc::odbc(), driver = "SQL Server", database = "dbad_flights",
UID = rstudioapi::askForPassword("Database user"), PWD = rstudioapi::askForPassword("Database password"),
server = "mssql-2016.labs.wmi.amu.edu.pl", port = 5432)
```{r, echo=FALSE}
data <- DBI::dbGetQuery(con, "SELECT dep_delay,
arr_delay
FROM   Flight_delays
WHERE  dep_delay IS NOT NULL AND arr_delay IS NOT NULL;")
con <- DBI::dbConnect(odbc::odbc(),
driver = "SQL Server",
database = "dbad_flights",
UID    = "dbad_s444409",
PWD    = "qAOKvlYA6e",
server = "mssql-2016.labs.wmi.amu.edu.pl",
port = 5432)
data <- DBI::dbGetQuery(con, "SELECT dep_delay,
arr_delay
FROM   Flight_delays
WHERE  dep_delay IS NOT NULL AND arr_delay IS NOT NULL;")
library(knitr)
res <- cor(data, use = "all", method = "pearson")
kable(res[2:2])
con <- DBI::dbConnect(odbc::odbc(),
driver = "SQL Server",
database = "dbad_flights",
UID    = "dbad_s444409",
PWD    = "qAOKvlYA6e",
server = "mssql-2016.labs.wmi.amu.edu.pl",
port = 5432)
data <- DBI::dbGetQuery(con, "SELECT dep_delay,
arr_delay
FROM   Flight_delays
WHERE  dep_delay IS NOT NULL AND arr_delay IS NOT NULL;")
library(knitr)
res <- cor(data, use = "all", method = "pearson")
kable(res[2:2])
con <- DBI::dbConnect(odbc::odbc(),
driver = "SQL Server",
database = "dbad_flights",
UID    = "dbad_s444409",
PWD    = "qAOKvlYA6e",
server = "mssql-2016.labs.wmi.amu.edu.pl",
port = 5432)
data <- DBI::dbGetQuery(con, "SELECT dep_delay,
arr_delay
FROM   Flight_delays
WHERE  dep_delay IS NOT NULL AND arr_delay IS NOT NULL;")
library(knitr)
res <- cor(data, use = "all", method = "pearson")
kable(res[2:2])
con <- DBI::dbConnect(odbc::odbc(),
driver = "SQL Server",
database = "dbad_flights",
UID    = "dbad_s444409",
PWD    = "qAOKvlYA6e",
server = "mssql-2016.labs.wmi.amu.edu.pl",
port = 5432)
data <- DBI::dbGetQuery(con, "SELECT dep_delay,
arr_delay
FROM   Flight_delays
WHERE  dep_delay IS NOT NULL AND arr_delay IS NOT NULL;")
library(knitr)
res <- cor(data, use = "all", method = "pearson")
kable(res[2:2])
con <- DBI::dbConnect(odbc::odbc(),
driver = "SQL Server",
database = "dbad_flights",
UID    = "dbad_s444409",
PWD    = "qAOKvlYA6e",
server = "mssql-2016.labs.wmi.amu.edu.pl",
port = 5432)
data <- DBI::dbGetQuery(con, "SELECT dep_delay,
arr_delay
FROM   Flight_delays
WHERE  dep_delay IS NOT NULL AND arr_delay IS NOT NULL;")
library(knitr)
res <- cor(data, use = "all", method = "pearson")
kable(res[2:2])
con <- DBI::dbConnect(odbc::odbc(),
driver = "SQL Server",
database = "dbad_flights",
UID    = "dbad_s444409",
PWD    = "qAOKvlYA6e",
server = "mssql-2016.labs.wmi.amu.edu.pl",
port = 5432)
data <- DBI::dbGetQuery(con, "SELECT dep_delay,
arr_delay
FROM   Flight_delays
WHERE  dep_delay IS NOT NULL AND arr_delay IS NOT NULL;")
library(knitr)
res <- cor(data, use = "all", method = "pearson")
kable(res[2:2])
con <- DBI::dbConnect(odbc::odbc(),
driver = "SQL Server",
database = "dbad_flights",
UID    = "dbad_s444409",
PWD    = "qAOKvlYA6e",
server = "mssql-2016.labs.wmi.amu.edu.pl",
port = 5432)
data <- DBI::dbGetQuery(con, "SELECT dep_delay,
arr_delay
FROM   Flight_delays
WHERE  dep_delay IS NOT NULL AND arr_delay IS NOT NULL;")
library(knitr)
res <- cor(data, use = "all", method = "pearson")
kable(res[2:2])
